"""–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
from __future__ import annotations

# –£–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –∫–æ–¥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ
from aiogram import Bot

import asyncio
import importlib.util
import logging
import os
from dataclasses import dataclass
from datetime import datetime, timedelta
from .greeting import greet_user
from .users import USERS, User, get_direction_label, get_users_by_direction
from .tasks import Task, TaskPriority, TaskStatus, create_task, TASKS, delete_task as remove_task

LOGGER = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if importlib.util.find_spec("aiogram") is None:
    raise RuntimeError(
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç aiogram. "
        "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π 'pip install aiogram'."
    )

from aiogram import Dispatcher, F  # noqa: E402
from aiogram.filters import CommandStart, Command  # noqa: E402
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery  # noqa: E402
from aiogram.fsm.context import FSMContext  # noqa: E402
from aiogram.fsm.state import State, StatesGroup  # noqa: E402
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
PROJECTS = {
    "crmk": "–¶–†–ú–ö –ë—É–∫–æ–ª–ø–∞–∫",
    "kinoclub": "–ö–∏–Ω–æ–∫–ª—É–± –ö–∞–¥—Ä",
    "anticafe": "–ê–Ω—Ç–∏–∫–∞—Ñ–µ –ö–æ–≤—ë—Ä",
    "literature": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–ª—É–± –ü–µ—Ä–µ–ø–ª—ë—Ç",
    "boardgames": "–ü—Ä–æ–µ–∫—Ç –ù–∞—Å—Ç–æ–ª–∫–∏ —Å –≤–µ–¥—É—â–∏–º",
    "podcast": "–ü–æ–¥–∫–∞—Å—Ç –î–µ—Å—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞",
    "tourism": "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –¶–∏—Ñ—Ä–æ–≤–æ–π –¢–æ—Ä–∂–æ–∫—ä",
    "vinyl": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –í–∏–Ω–∏–ª",
    "caps": "–ü—Ä–æ–µ–∫—Ç –ö–æ–ª–ø–∞—á–∫–∏",
    "quizzes": "–ö–≤–∏–∑—ã",
}

DIRECTIONS = {
    "all": "–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "stn": "–°–æ—Ü–∏–∞–ª—å–Ω–æ-—Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–°–¢–ù)",
    "oan": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–û–ê–ù)",
    "nmsd": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞, —Å–º–º, –¥–∏–∑–∞–π–Ω–∞ (–ù–ú–°–î)",
    "noim": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ (–ù–û–∏–ú)",
    "nnia": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (–ù–ù–∏–ê)",
}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def direction_title(direction_id: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö."""

    label = get_direction_label(direction_id)
    if "(" in label and ")" in label:
        return label.split("(")[0].strip()
    return label

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
class TaskCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_due_date = State()
    waiting_for_priority = State()
    waiting_for_project = State()
    waiting_for_direction = State()
    waiting_for_responsible = State()
    waiting_for_workgroup = State()
    waiting_for_privacy = State()


@dataclass(slots=True)
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""

    token: str
    drop_pending_updates: bool = True


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        admin_id = int(os.getenv("TELEGRAM_ADMIN_ID", 0))
        return user_id == admin_id
    except (ValueError, TypeError):
        return False


def parse_date(date_str: str) -> datetime | None:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î-–ú–ú-–ì–ì–ì–ì."""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        date_str = date_str.replace('-', '.')
        return datetime.strptime(date_str, '%d.%m.%Y')
    except ValueError:
        return None


def calculate_due_date(priority: TaskPriority, created_date: datetime) -> datetime:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
    priority_days = {
        TaskPriority.CRITICAL: 1,
        TaskPriority.HIGH: 3,
        TaskPriority.MEDIUM: 10,
        TaskPriority.LOW: 15,
    }
    days = priority_days.get(priority, 10)
    return created_date + timedelta(days=days)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Inline –∫–Ω–æ–ø–∫–∏)
def main_menu_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="all_tasks"),
                InlineKeyboardButton(text="üë§ –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")
            ],
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
    )


# –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
def tasks_filter_kb(back_to: str = "main"):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="filter_active"),
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="filter_completed")
            ],
            [
                InlineKeyboardButton(text="–í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="filter_all")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{back_to}")
            ]
        ]
    )


# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
STATUS_ICONS = {
    TaskStatus.NEW: "üÜï",
    TaskStatus.ACTIVE: "üîÑ",
    TaskStatus.PAUSED: "‚è∏Ô∏è",
    TaskStatus.COMPLETED: "‚úÖ",
}

PRIORITY_ICONS = {
    TaskPriority.CRITICAL: "üî¥",
    TaskPriority.HIGH: "üü†",
    TaskPriority.MEDIUM: "üü°",
    TaskPriority.LOW: "üü¢",
}

TASKS_PER_PAGE = 5


# –ú–µ–Ω—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
def priority_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π (1 –¥–µ–Ω—å)", callback_data="priority_critical"),
            ],
            [
                InlineKeyboardButton(text="üü† –í—ã—Å–æ–∫–∏–π (3 –¥–Ω—è)", callback_data="priority_high"),
            ],
            [
                InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π (10 –¥–Ω–µ–π)", callback_data="priority_medium"),
            ],
            [
                InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π (15 –¥–Ω–µ–π)", callback_data="priority_low"),
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_creation"),
            ]
        ]
    )


# –ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
def projects_kb():
    buttons = []
    row = []
    
    for project_id, project_name in PROJECTS.items():
        row.append(InlineKeyboardButton(text=project_name, callback_data=f"project_{project_id}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    
    if row:
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_creation")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
def directions_kb():
    buttons = []
    row = []
    
    for direction_id, direction_name in DIRECTIONS.items():
        row.append(InlineKeyboardButton(text=direction_name, callback_data=f"direction_{direction_id}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    
    if row:
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_creation")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def users_kb(users: list[User], selected_users: set[int], action: str, back_to: str):
    buttons = []
    
    for user in users:
        selected = "‚úÖ " if user.user_id in selected_users else ""
        buttons.append([
            InlineKeyboardButton(
                text=f"{selected}{user.first_name}", 
                callback_data=f"{action}_{user.user_id}"
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_{action}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{back_to}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
def privacy_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è", callback_data="privacy_private"),
                InlineKeyboardButton(text="üåê –ü—É–±–ª–∏—á–Ω–∞—è", callback_data="privacy_public"),
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_creation"),
            ]
        ]
    )


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
def tasks_list_kb(tasks: list[Task], view: str, filter_type: str, page: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""

    buttons: list[list[InlineKeyboardButton]] = []
    start_index = (page - 1) * TASKS_PER_PAGE
    page_tasks = tasks[start_index:start_index + TASKS_PER_PAGE]

    for idx, task in enumerate(page_tasks, start=start_index + 1):
        buttons.append([
            InlineKeyboardButton(
                text=f"{idx}. {task.title}",
                callback_data=f"task_detail:{task.task_id}:{view}:{filter_type}:{page}",
            )
        ])

    navigation_row: list[InlineKeyboardButton] = []
    if page > 1:
        navigation_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"tasks_page:{view}:{filter_type}:{page - 1}"))
    if start_index + len(page_tasks) < len(tasks):
        navigation_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"tasks_page:{view}:{filter_type}:{page + 1}"))
    if navigation_row:
        buttons.append(navigation_row)

    buttons.append([
        InlineKeyboardButton(text="üìã –§–∏–ª—å—Ç—Ä—ã", callback_data=f"tasks_filters:{view}"),
    ])
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"),
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def task_detail_kb(task_id: int, is_author: bool, view: str, filter_type: str, page: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏."""

    buttons: list[list[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton(text="üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_task_{task_id}"),
            InlineKeyboardButton(text="‚è∏Ô∏è –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"pause_task_{task_id}"),
        ]
    ]

    if is_author:
        buttons.append([
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=f"delete_task:{task_id}:{view}:{filter_type}:{page}",
            )
        ])

    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"tasks_page:{view}:{filter_type}:{page}"),
    ])
    buttons.append([
        InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"),
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_tasks_list_text(tasks: list[Task], filter_text: str, page: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π."""

    total_pages = max(1, (len(tasks) + TASKS_PER_PAGE - 1) // TASKS_PER_PAGE)
    start_index = (page - 1) * TASKS_PER_PAGE
    page_tasks = tasks[start_index:start_index + TASKS_PER_PAGE]

    lines: list[str] = [f"üìã <b>{filter_text.capitalize()} –∑–∞–¥–∞—á–∏</b>"]
    lines.append("")

    for idx, task in enumerate(page_tasks, start=start_index + 1):
        status_icon = STATUS_ICONS.get(task.status, "‚ùì")
        priority_icon = PRIORITY_ICONS.get(task.priority, "‚ö™")
        overdue_icon = "‚è∞ " if task.due_date and task.due_date < datetime.now() and task.status != TaskStatus.COMPLETED else ""
        responsible_name = USERS[task.responsible_user_id].first_name if task.responsible_user_id in USERS else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        due_date = task.due_date.strftime('%d.%m.%Y') if task.due_date else "–ë–µ–∑ —Å—Ä–æ–∫–∞"

        lines.extend([
            f"{idx}. {status_icon} {priority_icon} {overdue_icon}<b>{task.title}</b>",
            f"   üë§ {responsible_name}",
            f"   üìÖ {due_date}",
            "",
        ])

    lines.append(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}")
    return "\n".join(lines)


def build_task_detail_text(task: Task) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""

    responsible_name = USERS[task.responsible_user_id].first_name if task.responsible_user_id in USERS else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    author_name = USERS[task.author_id].first_name if task.author_id in USERS else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    due_date = task.due_date.strftime('%d.%m.%Y') if task.due_date else "–ù–µ —É–∫–∞–∑–∞–Ω"
    created = task.created_date.strftime('%d.%m.%Y')
    workgroup_names = [
        USERS[user_id].first_name
        for user_id in task.workgroup
        if user_id in USERS
    ]
    workgroup_text = ", ".join(workgroup_names) if workgroup_names else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    description = task.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    project_name = PROJECTS.get(task.project, "–ù–µ —É–∫–∞–∑–∞–Ω")
    direction_name = get_direction_label(task.direction) if task.direction else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    status_icon = STATUS_ICONS.get(task.status, "‚ùì")
    priority_icon = PRIORITY_ICONS.get(task.priority, "‚ö™")

    lines = [
        f"üìù <b>{task.title}</b>",
        "",
        f"{status_icon} –°—Ç–∞—Ç—É—Å: {task.status.value}",
        f"{priority_icon} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}",
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created}",
        f"üìÜ –°—Ä–æ–∫: {due_date}",
        f"üè¢ –ü—Ä–æ–µ–∫—Ç: {project_name}",
        f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}",
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}",
        f"‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}",
        f"üë• –†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞: {workgroup_text}",
    ]

    if task.completed_date:
        lines.append(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {task.completed_date.strftime('%d.%m.%Y')}")

    return "\n".join(lines)


# –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π
def task_actions_kb(task_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_task_{task_id}"),
                InlineKeyboardButton(text="‚è∏Ô∏è –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"pause_task_{task_id}"),
            ],
            [
                InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"),
            ]
        ]
    )


# –ú–µ–Ω—é –ø–æ–º–æ—â–∏
def help_menu_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ó–∞–¥–∞—á–∏", callback_data="help_tasks"),
                InlineKeyboardButton(text="üü¢ –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á", callback_data="help_statuses")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            ]
        ]
    )


# –ú–µ–Ω—é –ø–æ–º–æ—â–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
def help_tasks_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á", callback_data="help_add_tasks"),
                InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä", callback_data="help_filter")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_help")
            ]
        ]
    )


# –ú–µ–Ω—é –ø–æ–º–æ—â–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
def help_statuses_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="help_by_status"),
                InlineKeyboardButton(text="‚ö° –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", callback_data="help_by_priority")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_help")
            ]
        ]
    )


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–Ω—é
def back_button_kb(back_to: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{back_to}")
            ]
        ]
    )


def get_main_message(user_id: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    greeting = greet_user(user_id)
    
    if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in greeting:
        return greeting
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    user_tasks = [task for task in TASKS.values() if user_id in task.workgroup or task.responsible_user_id == user_id]
    active_tasks = [task for task in user_tasks if task.status == TaskStatus.ACTIVE]
    overdue_tasks = [task for task in user_tasks if task.due_date and task.due_date < datetime.now() and task.status != TaskStatus.COMPLETED]
    
    stats_text = (
        f"{greeting}\n\n"
        "üìä <b>–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len([t for t in active_tasks if t.due_date and t.due_date.date() == datetime.now().date()])}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(user_tasks)}\n"
        f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {len(overdue_tasks)}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {len(active_tasks)}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len([t for t in user_tasks if t.status == TaskStatus.COMPLETED])}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {len([t for t in user_tasks if t.status == TaskStatus.NEW])}"
    )
    return stats_text


def get_help_text(user_id: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    if is_admin(user_id):
        # –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return (
            "ü§ñ <b>–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n\n"
            
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" 
            "‚Ä¢ /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ /logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
            "‚Ä¢ /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /backup - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:</b>\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
    else:
        # –ü–æ–º–æ—â—å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return (
            "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∑–∞–¥–∞—á</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )


def get_help_section_text(section: str, user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏."""
    
    texts = {
        "help_tasks": (
            "üìã <b>–ü–æ–º–æ—â—å –ø–æ –∑–∞–¥–∞—á–∞–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:"
        ),
        "help_add_tasks": (
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á - –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏</b>\n\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ\n"
            "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        ),
        "help_filter": (
            "üîç <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á</b>\n\n"
            "‚Ä¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ</b> - –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ\n"
            "‚Ä¢ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</b> - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ <b>–í—Å–µ –∑–∞–¥–∞—á–∏</b> - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"
        ),
        "help_statuses": (
            "üü¢ <b>–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
        ),
        "help_by_status": (
            "üìä <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É</b>\n\n"
            "‚Ä¢ <b>–ù–æ–≤—ã–µ</b> - –æ–∂–∏–¥–∞—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            "‚Ä¢ <b>–í —Ä–∞–±–æ—Ç–µ</b> - –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è\n"
            "‚Ä¢ <b>–ù–∞ –ø–∞—É–∑–µ</b> - –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
            "‚Ä¢ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</b> - –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n"
            "‚Ä¢ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</b> - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —Å—Ä–æ–∫"
        ),
        "help_by_priority": (
            "‚ö° <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</b>\n\n"
            "‚Ä¢ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
            "‚Ä¢ <b>–í—ã—Å–æ–∫–∏–π</b> - —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ <b>–°—Ä–µ–¥–Ω–∏–π</b> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ <b>–ù–∏–∑–∫–∏–π</b> - –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"
        )
    }
    
    return texts.get(section, "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def create_dispatcher() -> Dispatcher:
    """–°–æ–∑–¥–∞—ë—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã."""

    dispatcher = Dispatcher()

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    task_data = {}

    async def safe_edit_message(message: Message, text: str, reply_markup: InlineKeyboardMarkup | None = None) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""

        try:
            await message.edit_text(text=text, reply_markup=reply_markup)
        except TelegramBadRequest as error:
            if "message is not modified" in error.message:
                return
            raise

    async def safe_edit_message_by_id(
        bot: Bot,
        chat_id: int,
        message_id: int,
        text: str,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> None:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""

        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
            )
        except TelegramBadRequest as error:
            if "message is not modified" in error.message:
                return
            raise

    def build_creation_header(data: dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –∑–∞–¥–∞—á–∏."""

        lines: list[str] = ["üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>"]

        title = data.get("title")
        if title:
            lines.append(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")

        if "description" in data:
            description = data.get("description") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            lines.append(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}")

        if "due_date" in data:
            due_date = data.get("due_date")
            if isinstance(due_date, datetime):
                lines.append(f"üìÖ –°—Ä–æ–∫: {due_date.strftime('%d.%m.%Y')}")
            else:
                lines.append("üìÖ –°—Ä–æ–∫: –ù–µ —É–∫–∞–∑–∞–Ω")

        priority = data.get("priority")
        if priority:
            lines.append(f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.value}")

        project = data.get("project")
        if project:
            project_name = PROJECTS.get(project, project)
            lines.append(f"üè¢ –ü—Ä–æ–µ–∫—Ç: {project_name}")

        direction = data.get("direction")
        if direction:
            lines.append(f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_direction_label(direction)}")

        responsible_users = data.get("responsible_users")
        if responsible_users:
            names = [
                USERS[user_id].first_name
                for user_id in responsible_users
                if user_id in USERS
            ]
            if names:
                lines.append(f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {', '.join(names)}")

        workgroup_users = data.get("workgroup_users")
        if workgroup_users:
            names = [
                USERS[user_id].first_name
                for user_id in workgroup_users
                if user_id in USERS
            ]
            if names:
                lines.append(f"üë• –†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞: {', '.join(names)}")

        if "is_private" in data:
            is_private = data.get("is_private")
            privacy_text = "–õ–∏—á–Ω–∞—è" if is_private else "–û–±—â–∞—è"
            lines.append(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: {privacy_text}")

        return "\n".join(lines)

    @dispatcher.message(CommandStart())
    async def handle_start(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
        await state.clear()
        user_id = message.from_user.id if message.from_user else 0
        text = get_main_message(user_id)
        
        if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in text:
            await message.answer(text)
            return
        
        await message.answer(text, reply_markup=main_menu_kb())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    @dispatcher.callback_query(F.data == "all_tasks")
    @dispatcher.callback_query(F.data == "my_tasks")
    async def handle_tasks_list(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á."""
        await state.clear()
        user_id = callback.from_user.id
        text = get_main_message(user_id)
        
        if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in text:
            await callback.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            return
        
        list_type = "–≤—Å–µ—Ö" if callback.data == "all_tasks" else "–≤–∞—à–∏—Ö"
        new_text = f"üìä –ü—Ä–æ—Å–º–æ—Ç—Ä {list_type} –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:"
        
        await safe_edit_message(
            callback.message,
            text=new_text,
            reply_markup=tasks_filter_kb(),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data == "add_task")
    async def handle_add_task(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        user_id = callback.from_user.id
        text = get_main_message(user_id)

        if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in text:
            await callback.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        await state.set_state(TaskCreation.waiting_for_title)
        task_data[user_id] = {
            'author_id': user_id,
            'created_date': datetime.now(),
            'responsible_users': set(),
            'workgroup_users': set(),
            'message_id': callback.message.message_id,
        }

        header = build_creation_header(task_data[user_id])
        prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
            ),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data == "cancel_task_creation")
    async def handle_cancel_task_creation(callback: CallbackQuery, state: FSMContext) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        await state.clear()
        user_id = callback.from_user.id
        if user_id in task_data:
            del task_data[user_id]
        
        text = get_main_message(user_id)
        await safe_edit_message(
            callback.message,
            text=text,
            reply_markup=main_menu_kb(),
        )
        await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    @dispatcher.message(TaskCreation.waiting_for_title)
    async def process_task_title(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        user_id = message.from_user.id
        if user_id not in task_data:
            await state.clear()
            await message.answer("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
            return
        
        task_data[user_id]['title'] = message.text.strip()
        await state.set_state(TaskCreation.waiting_for_description)

        message_id = task_data[user_id].get('message_id')
        if message_id:
            header = build_creation_header(task_data[user_id])
            prompt = "üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
            await safe_edit_message_by_id(
                message.bot,
                chat_id=message.chat.id,
                message_id=message_id,
                text=f"{header}\n\n{prompt}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_title")]]
                ),
            )
        await message.delete()

    @dispatcher.callback_query(F.data == "back_task_title")
    async def handle_back_title(callback: CallbackQuery, state: FSMContext) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è."""
        user_id = callback.from_user.id
        await state.set_state(TaskCreation.waiting_for_title)
        
        task_info = task_data.get(user_id, {})
        task_info.pop('title', None)
        header = build_creation_header(task_info)
        prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
            ),
        )
        await callback.answer()

    @dispatcher.message(TaskCreation.waiting_for_description)
    async def process_task_description(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        user_id = message.from_user.id
        if user_id not in task_data:
            await state.clear()
            await message.answer("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
            return
        
        description = message.text.strip() if message.text != '-' else ''
        task_data[user_id]['description'] = description
        await state.set_state(TaskCreation.waiting_for_due_date)

        message_id = task_data[user_id].get('message_id')
        if message_id:
            header = build_creation_header(task_data[user_id])
            prompt = "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞):"
            await safe_edit_message_by_id(
                message.bot,
                chat_id=message.chat.id,
                message_id=message_id,
                text=f"{header}\n\n{prompt}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_due_date")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_description")],
                    ]
                ),
            )
        await message.delete()

    @dispatcher.callback_query(F.data == "back_task_description")
    async def handle_back_description(callback: CallbackQuery, state: FSMContext) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è."""
        user_id = callback.from_user.id
        await state.set_state(TaskCreation.waiting_for_description)
        
        task_info = task_data.get(user_id, {})
        header = build_creation_header(task_info)
        prompt = "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_task_title")]]
            ),
        )
        await callback.answer()

    @dispatcher.message(TaskCreation.waiting_for_due_date)
    async def process_task_due_date(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        user_id = message.from_user.id
        if user_id not in task_data:
            await state.clear()
            await message.answer("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
            return
        
        if message.text != '-':
            due_date = parse_date(message.text)
            if not due_date:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î-–ú–ú-–ì–ì–ì–ì")
                return
            task_data[user_id]['due_date'] = due_date
        else:
            task_data[user_id]['due_date'] = None  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        
        await state.set_state(TaskCreation.waiting_for_priority)
        message_id = task_data[user_id].get('message_id')
        if message_id:
            header = build_creation_header(task_data[user_id])
            prompt = "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:"
            await safe_edit_message_by_id(
                message.bot,
                chat_id=message.chat.id,
                message_id=message_id,
                text=f"{header}\n\n{prompt}",
                reply_markup=priority_kb(),
            )
        await message.delete()

    @dispatcher.callback_query(F.data == "skip_due_date")
    async def handle_skip_due_date(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            await callback.answer()
            return

        task_data[user_id]['due_date'] = None
        await state.set_state(TaskCreation.waiting_for_priority)

        header = build_creation_header(task_data[user_id])
        prompt = "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=priority_kb(),
        )
        await callback.answer("–°—Ä–æ–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

    @dispatcher.callback_query(F.data.startswith("priority_"))
    async def handle_priority_selection(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        priority_key = callback.data.replace("priority_", "")
        try:
            priority = TaskPriority[priority_key.upper()]
        except KeyError:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", show_alert=True)
            return

        task_data[user_id]['priority'] = priority

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if not task_data[user_id].get('due_date'):
            due_date = calculate_due_date(priority, task_data[user_id]['created_date'])
            task_data[user_id]['due_date'] = due_date
        
        await state.set_state(TaskCreation.waiting_for_project)
        header = build_creation_header(task_data[user_id])
        prompt = "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=projects_kb(),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("project_"))
    async def handle_project_selection(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        project_id = callback.data.replace("project_", "")
        task_data[user_id]['project'] = project_id
        
        await state.set_state(TaskCreation.waiting_for_direction)
        header = build_creation_header(task_data[user_id])
        prompt = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=directions_kb(),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("direction_"))
    async def handle_direction_selection(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        direction_id = callback.data.replace("direction_", "")
        task_data[user_id]['direction'] = direction_id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        direction_name = direction_title(direction_id)
        users = get_users_by_direction(direction_id)
        
        await state.set_state(TaskCreation.waiting_for_responsible)
        header = build_creation_header(task_data[user_id])
        prompt = f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}):"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=users_kb(users, set(), "responsible", "direction"),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("responsible_"))
    async def handle_responsible_selection(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        selected_user_id = int(callback.data.replace("responsible_", ""))
        selected_responsible = task_data[user_id]['responsible_users']
        
        if selected_user_id in selected_responsible:
            selected_responsible.remove(selected_user_id)
        else:
            selected_responsible.clear()
            selected_responsible.add(selected_user_id)
        
        direction_id = task_data[user_id]['direction']
        direction_name = direction_title(direction_id)
        users = get_users_by_direction(direction_id)
        
        header = build_creation_header(task_data[user_id])
        prompt = (
            f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}):\n"
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {len(selected_responsible)}"
        )

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=users_kb(users, selected_responsible, "responsible", "direction"),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data == "done_responsible")
    async def handle_done_responsible(callback: CallbackQuery, state: FSMContext) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        if not task_data[user_id]['responsible_users']:
            await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ!")
            return
        
        direction_id = task_data[user_id]['direction']
        direction_name = direction_title(direction_id)
        users = get_users_by_direction(direction_id)
        
        await state.set_state(TaskCreation.waiting_for_workgroup)
        header = build_creation_header(task_data[user_id])
        prompt = "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=users_kb(users, task_data[user_id]['workgroup_users'], "workgroup", "responsible"),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("workgroup_"))
    async def handle_workgroup_selection(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        selected_user_id = int(callback.data.replace("workgroup_", ""))
        
        if selected_user_id in task_data[user_id]['workgroup_users']:
            task_data[user_id]['workgroup_users'].remove(selected_user_id)
        else:
            task_data[user_id]['workgroup_users'].add(selected_user_id)
        
        direction_id = task_data[user_id]['direction']
        direction_name = direction_title(direction_id)
        users = get_users_by_direction(direction_id)
        
        header = build_creation_header(task_data[user_id])
        prompt = (
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {len(task_data[user_id]['workgroup_users'])}"
        )

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=users_kb(users, task_data[user_id]['workgroup_users'], "workgroup", "responsible"),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data == "done_workgroup")
    async def handle_done_workgroup(callback: CallbackQuery, state: FSMContext) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        await state.set_state(TaskCreation.waiting_for_privacy)
        header = build_creation_header(task_data[user_id])
        prompt = "üîí –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ:"

        await safe_edit_message(
            callback.message,
            text=f"{header}\n\n{prompt}",
            reply_markup=privacy_kb(),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("privacy_"))
    async def handle_privacy_selection(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏."""
        user_id = callback.from_user.id
        if user_id not in task_data:
            await state.clear()
            await safe_edit_message(
                callback.message,
                text="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu_kb(),
            )
            return
        
        privacy = callback.data.replace("privacy_", "")
        task_data[user_id]['is_private'] = (privacy == 'private')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_info = task_data[user_id]
        try:
            responsible_user_id = next(iter(task_info['responsible_users']))
            workgroup_users = list(task_info['workgroup_users'])
            task = create_task(
                title=task_info['title'],
                description=task_info['description'],
                author_id=user_id,
                priority=task_info['priority'],
                due_date=task_info['due_date'],
                project=task_info['project'],
                direction=task_info['direction'],
                responsible_user_id=responsible_user_id,
                workgroup=workgroup_users,
                is_private=task_info['is_private']
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            bot = callback.bot
            all_notified_users = {responsible_user_id}
            all_notified_users.update(workgroup_users)

            responsible_user = USERS.get(responsible_user_id)
            responsible_name = responsible_user.first_name if responsible_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

            for notified_user_id in all_notified_users:
                user = USERS.get(notified_user_id)
                if user is None:
                    continue
                try:
                    await bot.send_message(
                        chat_id=notified_user_id,
                        text=(
                            "üîî <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
                            f"üìù <b>{task.title}</b>\n"
                            f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}\n"
                            f"üìÖ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y') if task.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                            f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}"
                        ),
                        reply_markup=task_actions_kb(task.task_id)
                    )
                except Exception as e:
                    LOGGER.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notified_user_id}: {e}")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
            success_text = (
                "‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üìù <b>{task.title}</b>\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìÖ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y') if task.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}\n"
                f"üè¢ –ü—Ä–æ–µ–∫—Ç: {PROJECTS[task.project]}\n"
                f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_direction_label(task.direction)}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_notified_users)}"
            )
            await safe_edit_message(
                callback.message,
                text=success_text,
                reply_markup=main_menu_kb(),
            )


            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del task_data[user_id]
            await state.clear()
            
        except Exception as e:
            LOGGER.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            error_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏!</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ."
            )
            await safe_edit_message(
                callback.message,
                text=error_text,
                reply_markup=main_menu_kb(),
            )
            if user_id in task_data:
                del task_data[user_id]
            await state.clear()
        
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    @dispatcher.callback_query(F.data.startswith("back_"))
    async def handle_back_buttons(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞."""
        back_to = callback.data.replace("back_", "")
        user_id = callback.from_user.id
        
        if back_to == "main":
            text = get_main_message(user_id)
            await safe_edit_message(
                callback.message,
                text=text,
                reply_markup=main_menu_kb(),
            )

        elif back_to == "help":
            await safe_edit_message(
                callback.message,
                text=get_help_text(user_id),
                reply_markup=help_menu_kb(),
            )
        
        elif back_to == "task_creation":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            task_data[user_id] = {
                'author_id': user_id,
                'created_date': datetime.now(),
                'responsible_users': set(),
                'workgroup_users': set(),
                'message_id': callback.message.message_id,
            }
            await state.set_state(TaskCreation.waiting_for_title)
            header = build_creation_header(task_data[user_id])
            prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
            await safe_edit_message(
                callback.message,
                text=f"{header}\n\n{prompt}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
                ),
            )
        
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–º–æ—â–∏
    @dispatcher.callback_query(F.data == "help")
    async def handle_help(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏."""
        user_id = callback.from_user.id
        await safe_edit_message(
            callback.message,
            text=get_help_text(user_id),
            reply_markup=help_menu_kb(),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("help_"))
    async def handle_help_sections(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏."""
        section = callback.data
        user_id = callback.from_user.id
        
        if section in ["help_tasks", "help_statuses"]:
            text = get_help_section_text(section, user_id)
            if section == "help_tasks":
                await safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=help_tasks_kb(),
                )
            else:
                await safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=help_statuses_kb(),
                )
        else:
            text = get_help_section_text(section, user_id)
            if section == "help_add_tasks":
                await safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=back_button_kb("help_tasks"),
                )
            elif section in ["help_filter", "help_by_status", "help_by_priority"]:
                await safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=back_button_kb("help_tasks" if section == "help_filter" else "help_statuses"),
                )
            else:
                await safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=back_button_kb("help"),
                )
        
        await callback.answer()

    def get_tasks_for_view(view: str, user_id: int) -> list[Task]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""

        if view == "my":
            return [task for task in TASKS.values() if user_id in task.workgroup or task.responsible_user_id == user_id]
        return list(TASKS.values())

    def filter_tasks(tasks: list[Task], filter_type: str) -> tuple[list[Task], str]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞."""

        if filter_type == "active":
            return [task for task in tasks if task.status == TaskStatus.ACTIVE], "–∞–∫—Ç–∏–≤–Ω—ã–µ"
        if filter_type == "completed":
            return [task for task in tasks if task.status == TaskStatus.COMPLETED], "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
        return tasks, "–≤—Å–µ"

    @dispatcher.callback_query(F.data.startswith("filter_"))
    async def handle_task_filters(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á."""
        filter_type = callback.data.replace("filter_", "")
        user_id = callback.from_user.id
        view = "my" if callback.message.text.startswith("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á") else "all"

        tasks = get_tasks_for_view(view, user_id)
        tasks, filter_text = filter_tasks(tasks, filter_type)

        if not tasks:
            empty_text = (
                f"üìã <b>{filter_text.capitalize()} –∑–∞–¥–∞—á–∏</b>\n\n"
                "–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            await safe_edit_message(
                callback.message,
                text=empty_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –§–∏–ª—å—Ç—Ä—ã", callback_data=f"tasks_filters:{view}")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
                    ]
                ),
            )
            await callback.answer()
            return

        page = 1
        tasks_text = build_tasks_list_text(tasks, filter_text, page)
        keyboard = tasks_list_kb(tasks, view, filter_type, page)

        await safe_edit_message(
            callback.message,
            text=tasks_text,
            reply_markup=keyboard,
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("tasks_page:"))
    async def handle_tasks_page(callback: CallbackQuery, state: FSMContext) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á."""
        _, view, filter_type, page_str = callback.data.split(":", 3)
        user_id = callback.from_user.id
        tasks = get_tasks_for_view(view, user_id)
        tasks, filter_text = filter_tasks(tasks, filter_type)

        if not tasks:
            await callback.answer("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        total_pages = max(1, (len(tasks) + TASKS_PER_PAGE - 1) // TASKS_PER_PAGE)
        try:
            page = int(page_str)
        except ValueError:
            page = 1
        page = max(1, min(page, total_pages))

        tasks_text = build_tasks_list_text(tasks, filter_text, page)
        keyboard = tasks_list_kb(tasks, view, filter_type, page)

        await safe_edit_message(
            callback.message,
            text=tasks_text,
            reply_markup=keyboard,
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("task_detail:"))
    async def handle_task_detail(callback: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ."""
        parts = callback.data.split(":")
        if len(parts) != 5:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        _, task_id_str, view, filter_type, page_str = parts
        try:
            task_id = int(task_id_str)
            page = int(page_str)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        task = TASKS.get(task_id)
        if not task:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        text = build_task_detail_text(task)
        keyboard = task_detail_kb(task.task_id, callback.from_user.id == task.author_id, view, filter_type, page)

        await safe_edit_message(
            callback.message,
            text=text,
            reply_markup=keyboard,
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("tasks_filters:"))
    async def handle_tasks_filters_menu(callback: CallbackQuery, state: FSMContext) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–∞."""
        _, view = callback.data.split(":", 1)
        list_type = "–≤—Å–µ—Ö" if view == "all" else "–≤–∞—à–∏—Ö"
        text = f"üìä –ü—Ä–æ—Å–º–æ—Ç—Ä {list_type} –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:"

        await safe_edit_message(
            callback.message,
            text=text,
            reply_markup=tasks_filter_kb(),
        )
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("delete_task:"))
    async def handle_delete_task(callback: CallbackQuery, state: FSMContext) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–≤—Ç–æ—Ä."""
        parts = callback.data.split(":")
        if len(parts) != 5:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        _, task_id_str, view, filter_type, page_str = parts
        try:
            task_id = int(task_id_str)
            page = int(page_str)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        user_id = callback.from_user.id
        task = TASKS.get(task_id)

        if not task:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if task.author_id != user_id:
            await callback.answer("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä", show_alert=True)
            return

        remove_task(task_id)

        tasks = get_tasks_for_view(view, user_id)
        tasks, filter_text = filter_tasks(tasks, filter_type)

        if not tasks:
            empty_text = (
                f"üìã <b>{filter_text.capitalize()} –∑–∞–¥–∞—á–∏</b>\n\n"
                "–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            await safe_edit_message(
                callback.message,
                text=empty_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –§–∏–ª—å—Ç—Ä—ã", callback_data=f"tasks_filters:{view}")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
                    ]
                ),
            )
            await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
            return

        total_pages = max(1, (len(tasks) + TASKS_PER_PAGE - 1) // TASKS_PER_PAGE)
        page = max(1, min(page, total_pages))
        tasks_text = build_tasks_list_text(tasks, filter_text, page)
        keyboard = tasks_list_kb(tasks, view, filter_type, page)

        await safe_edit_message(
            callback.message,
            text=tasks_text,
            reply_markup=keyboard,
        )
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
    @dispatcher.callback_query(F.data.startswith("take_task_"))
    async def handle_take_task(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É."""
        task_id = int(callback.data.replace("take_task_", ""))
        
        if task_id in TASKS:
            task = TASKS[task_id]
            task.status = TaskStatus.ACTIVE

            taken_text = (
                "‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
                f"üìù <b>{task.title}</b>\n"
                "üîÑ –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n"
                f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {USERS[task.responsible_user_id].first_name if task.responsible_user_id in USERS else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}"
            )
            await safe_edit_message(
                callback.message,
                text=taken_text,
                reply_markup=main_menu_kb(),
            )
        else:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        await callback.answer()

    @dispatcher.callback_query(F.data.startswith("pause_task_"))
    async def handle_pause_task(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏."""
        task_id = int(callback.data.replace("pause_task_", ""))
        
        if task_id in TASKS:
            task = TASKS[task_id]
            task.status = TaskStatus.PAUSED

            paused_text = (
                "‚è∏Ô∏è <b>–ó–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                f"üìù <b>{task.title}</b>\n"
                "‚è∏Ô∏è –°—Ç–∞—Ç—É—Å: –ù–∞ –ø–∞—É–∑–µ\n"
                f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {USERS[task.responsible_user_id].first_name if task.responsible_user_id in USERS else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}"
            )
            await safe_edit_message(
                callback.message,
                text=paused_text,
                reply_markup=main_menu_kb(),
            )
        else:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        await callback.answer()

    return dispatcher


def run_bot_sync(config: BotConfig) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DefaultBotProperties
    from aiogram.client.default import DefaultBotProperties
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    bot = Bot(
        token=config.token, 
        default=DefaultBotProperties(parse_mode="HTML")
    )
    dispatcher = create_dispatcher()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(dispatcher.start_polling(
        bot, 
        drop_pending_updates=config.drop_pending_updates
    ))