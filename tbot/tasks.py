"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏."""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Iterable, List, Optional


class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á."""
    
    NEW = "–ù–æ–≤–∞—è"
    ACTIVE = "–í —Ä–∞–±–æ—Ç–µ"
    PAUSED = "–ù–∞ –ø–∞—É–∑–µ"
    COMPLETED = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    OVERDUE = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"


class TaskPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á."""
    
    LOW = "üü¢ –ù–∏–∑–∫–∏–π"
    MEDIUM = "üü° –°—Ä–µ–¥–Ω–∏–π"
    HIGH = "üü† –í—ã—Å–æ–∫–∏–π"
    CRITICAL = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"


@dataclass
class Task:
    """–ó–∞–¥–∞—á–∞."""
    
    task_id: int
    title: str
    description: str
    author_id: int
    created_date: datetime
    due_date: Optional[datetime]
    priority: TaskPriority
    status: TaskStatus = TaskStatus.NEW
    project: str = ""
    direction: str = ""
    responsible_user_id: int = 0
    workgroup: List[int] = field(default_factory=list)
    is_private: bool = False
    completed_date: Optional[datetime] = None


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –≤ –ø–∞–º—è—Ç–∏)
TASKS: dict[int, Task] = {}
_task_id_counter = 1


def create_task(
    title: str,
    description: str,
    author_id: int,
    priority: TaskPriority,
    due_date: Optional[datetime] = None,
    project: str = "",
    direction: str = "",
    responsible_user_id: int = 0,
    workgroup: Optional[Iterable[int]] = None,
    is_private: bool = False
) -> Task:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""
    global _task_id_counter

    workgroup_list = list(workgroup) if workgroup is not None else []

    task = Task(
        task_id=_task_id_counter,
        title=title,
        description=description,
        author_id=author_id,
        created_date=datetime.now(),
        due_date=due_date,
        priority=priority,
        project=project,
        direction=direction,
        responsible_user_id=responsible_user_id,
        workgroup=workgroup_list,
        is_private=is_private
    )

    TASKS[_task_id_counter] = task
    _task_id_counter += 1

    return task


def get_task(task_id: int) -> Optional[Task]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID."""
    return TASKS.get(task_id)


def get_user_tasks(user_id: int) -> List[Task]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_tasks = []
    
    for task in TASKS.values():
        if (not task.is_private or 
            user_id == task.author_id or 
            user_id == task.responsible_user_id or 
            user_id in task.workgroup):
            user_tasks.append(task)
    
    return user_tasks


def update_task_status(task_id: int, status: TaskStatus) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏."""
    task = TASKS.get(task_id)
    if task:
        task.status = status
        if status == TaskStatus.COMPLETED:
            task.completed_date = datetime.now()
        return True
    return False


def delete_task(task_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É."""
    if task_id in TASKS:
        del TASKS[task_id]
        return True
    return False