"""–ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö –±–æ—Ç–∞."""

import asyncio
from datetime import datetime

from tbot.bot import build_task_detail_text, build_tasks_list_text, send_task_reminder
from tbot.tasks import (
    Task,
    TaskPriority,
    TaskStatus,
    recalc_task_status,
    set_participant_status,
)

AUTHOR_ID = 7247710860
RESPONSIBLE_ID = 609995295
WORKGROUP_IDS = [1311714242, 678543417]


class _DummyBot:
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self) -> None:
        self.messages: list[tuple[int, str]] = []

    async def send_message(self, chat_id: int, text: str, reply_markup=None) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏."""

        self.messages.append((chat_id, text))


def _make_task() -> Task:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É —Å –∞–≤—Ç–æ—Ä–æ–º, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–æ–π."""

    task = Task(
        task_id=1,
        title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        description="",
        author_id=AUTHOR_ID,
        created_date=datetime.now(),
        due_date=None,
        priority=TaskPriority.MEDIUM,
        responsible_user_id=RESPONSIBLE_ID,
        workgroup=list(WORKGROUP_IDS),
    )

    participants = {AUTHOR_ID, RESPONSIBLE_ID, *WORKGROUP_IDS}

    for participant_id in participants:
        task.participant_statuses[participant_id] = TaskStatus.NEW

    return task


def test_task_detail_uses_personal_status_for_viewer() -> None:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑—Ä–∏—Ç–µ–ª—è, –∞ –Ω–µ –æ–±—â–∏–π."""

    task = _make_task()
    set_participant_status(task, WORKGROUP_IDS[0], TaskStatus.ACTIVE)
    recalc_task_status(task)

    author_text = build_task_detail_text(task, viewer_id=AUTHOR_ID)
    member_text = build_task_detail_text(task, viewer_id=WORKGROUP_IDS[1])

    assert "–°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ" in author_text
    assert "–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è" in member_text


def test_tasks_list_uses_personal_status_icon() -> None:
    """–í —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ –∏–∫–æ–Ω–∫–µ."""

    task = _make_task()
    set_participant_status(task, WORKGROUP_IDS[0], TaskStatus.ACTIVE)
    recalc_task_status(task)

    author_list = build_tasks_list_text([task], "–≤—Å–µ", 1, viewer_id=AUTHOR_ID)
    member_list = build_tasks_list_text([task], "–≤—Å–µ", 1, viewer_id=WORKGROUP_IDS[1])

    assert "1. üîÑ üü°" in author_list
    assert "1. üÜï üü°" in member_list


def test_send_task_reminder_uses_personal_status() -> None:
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è."""

    task = _make_task()
    set_participant_status(task, WORKGROUP_IDS[0], TaskStatus.ACTIVE)
    recalc_task_status(task)

    bot = _DummyBot()
    asyncio.run(
        send_task_reminder(
            bot,
            task,
            actor_id=AUTHOR_ID,
            recipients=list(WORKGROUP_IDS),
        )
    )

    messages = dict(bot.messages)

    first_member, second_member = WORKGROUP_IDS
    assert "–°—Ç–∞—Ç—É—Å: üîÑ –í —Ä–∞–±–æ—Ç–µ" in messages[first_member]
    assert "–°—Ç–∞—Ç—É—Å: üÜï –ù–æ–≤–∞—è" in messages[second_member]
